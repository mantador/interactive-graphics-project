{
  "version": 3,
  "sources": ["lib/constants.js", "lib/sphere.js", "lib/utils.js", "lib/computing.js", "lib/graphics.js", "lib/main.js"],
  "sourcesContent": ["export class Constants {\n  static nBodies = 8;\n  static canvasWidth\n  static canvasHeight\n  static dt = 1.0;\n  static log = false;\n  static get resolution() {\n    return Constants.canvasHeight / Constants.canvasWidth;\n  }\n\n  static setCanvasDimensions(width, height) {\n    Constants.canvasWidth = width;\n    Constants.canvasHeight = height;\n  }\n}\n", "import { Constants } from \"./constants\";\n\n\nexport class Sphere {\n  verteces = [];\n  static DIV = 50;\n  static PI2 = Math.PI * 2;\n  static DRAD = Sphere.PI2 / Sphere.DIV;\n\n  constructor(conf) {\n    this.verteces = [];\n    this._center = conf.center;\n    this.mass = conf.mass;\n    this._velocity = conf.velocity;\n  }\n\n  get velocity() { return [this._velocity.x, this._velocity.y, this._velocity.z, 0]; }\n\n  get center() { return [this._center.x, this._center.y, this._center.z, this.mass ]; }\n\n  static randomPosition(r) {\n    return Math.floor(Math.random() * (1000 - 2 * r)) + r;\n  }\n\n  static random(minRadius = 10, maxRadius = 40) {\n    const r = Math.floor(Math.random() * (maxRadius - minRadius)) + minRadius;\n    // Ensure that position + radius does not overflow the canvas\n    let x = Sphere.randomPosition(r);\n    let y = Sphere.randomPosition(r);\n    let z = Sphere.randomPosition(r);\n    return new Sphere({\n      center: {\n        x: x,\n        y: y,\n        z: z,\n      },\n      velocity: {\n        x: 0,\n        y: 0,\n        z: 0,\n      }, \n      mass: r,\n    });\n  }\n}\n", "import { Constants } from \"./constants\";\n\nfunction createCShader(gl, source, type) {\n  var shader = gl.createShader(type);\n  if (shader == null) throw new DOMException(\"Compiled shader is null\");\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.error(gl.getShaderInfoLog(shader));\n  throw new Error(gl.getShaderInfoLog(shader) || \"No message available\");\n}\n\nexport function createWebglProgram(gl, sourceVS, sourceFS) {\n  const vertexShader = createCShader(gl, sourceVS, gl.VERTEX_SHADER);\n  const fragmentShader = createCShader(gl, sourceFS, gl.FRAGMENT_SHADER);\n  var program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.error(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\nexport function resizeCanvasToDisplaySize(canvas) {\n  // Lookup the size the browser is displaying the canvas in CSS pixels.\n  const displayWidth = canvas.clientWidth;\n  const displayHeight = canvas.clientHeight;\n\n  // Check if the canvas is not the same size.\n  const needResize =\n    canvas.width !== displayWidth || canvas.height !== displayHeight;\n\n  if (needResize) {\n    // Make the canvas the same size\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n\n  return needResize;\n}\n\nexport function checkGlExtensions(canvas) {\n\n  const gl = canvas.getContext(\"webgl\");\n  if (!gl) {\n    throw new Error(\"No webgl here\");\n  }\n\n  // check we can use floating point textures\n  const ext1 = gl.getExtension('OES_texture_float');\n  if (!ext1) {\n    throw ('Need OES_texture_float');\n  }\n  // check we can render to floating point textures\n  const ext2 = gl.getExtension('WEBGL_color_buffer_float');\n  if (!ext2) {\n    throw ('Need WEBGL_color_buffer_float');\n  }\n  // check we can use textures in a vertex shader\n  if (gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) < 1) {\n    throw ('Can not use textures in vertex shaders');\n  }\n\n  const ext = gl.getExtension('GMAN_debug_helper');\n\n}\n\nexport function initCanvas() {\n  const canvas = document.querySelector(\"#canvas\");\n  if (!canvas) {\n    throw new Error(\"Canvas not found\");\n  }\n  checkGlExtensions(canvas);\n  resizeCanvasToDisplaySize(canvas);\n\n  const cw = canvas.clientWidth;\n  const ch = canvas.clientHeight;\n\n  Constants.setCanvasDimensions(cw, ch);\n  return canvas;\n}\n", "import { Constants } from \"./constants\";\nimport { Sphere } from \"./sphere\";\nimport { checkGlExtensions, createWebglProgram } from \"./utils\";\n\nconst vsVelocities = /*glsl*/`\nattribute vec4 position;\nvoid main() {\n  gl_Position = position;\n}\n`;\n\n// ===============================\n\nconst fsVelocities = /*glsl*/`\nprecision mediump float;\n\nuniform sampler2D positionTexture;\nuniform sampler2D velocityTexture;\nuniform vec2 dimensions;\nuniform float DT;\n\nconst float MAX_ITER=1000.0;\n\nvec2 indexToTextureIndex(vec2 dimensions, float index) {\n  float y = floor(index / dimensions.x);\n  float x = mod(index, dimensions.x);\n  return (vec2(x, y) + 0.5) / dimensions;\n}\n\nvec3 reflectVelocity(vec3 vel, vec3 normal) {\n  float dotp = dot(vel.xyz, normal);\n  float norm = dot(normal, normal);\n  return vel.xyz - (2.0 * (dotp/norm) )*normal;\n}\n\nvec3 checkAndAdjustCollision(vec4 pos, vec3 vel) {\n  if (pos.x >= 1000.0) {\n    vel = reflectVelocity(vel, vec3(-1, 0, 0));\n  }\n\n  if (pos.x <= 0.0) {\n    vel = reflectVelocity(vel, vec3(1, 0, 0));\n  }\n\n  if (pos.y >= 1000.0) { // Collision on upper plane\n    vel = reflectVelocity(vel, vec3(0, -1, 0));\n  }\n  if (pos.y <= 0.0) {\n    vel = reflectVelocity(vel, vec3(0, 1, 0));\n  }\n\n  if (pos.z >= 1000.0) {\n    vel = reflectVelocity(vel, vec3(0, 0, -1));\n  }\n\n  if (pos.z <= 0.0) {\n    vel = reflectVelocity(vel, vec3(0, 0, 1));\n  }\n\n  return vel;\n}\n\n\nvoid main() {\n  vec2 texcoord = gl_FragCoord.xy / dimensions;\n  vec3 force = vec3(0, 0, 0);\n  vec4 p1 = texture2D(positionTexture, texcoord);\n  vec4 v = texture2D(velocityTexture, texcoord);  \n  \n  float G = 1.0;\n\n  vec3 totalForce = vec3(0, 0, 0);\n\n  for(float i = 0.0; i < MAX_ITER; i++) {\n    if (float(i) == floor(gl_FragCoord.x)) { continue; }\n    if (float(i) == dimensions.x) { break; }\n\n    vec2 index = indexToTextureIndex(dimensions, float(i));\n\n    vec4 p2 = texture2D(positionTexture, index);\n    vec3 diff = p2.xyz - p1.xyz;\n    float distanc = pow(length(diff), 3.0);\n\n    vec3 force = G*( (p1.w * p2.w) / (distanc) )*diff;\n    totalForce += force;\n  }\n\n  vec3 acc = totalForce/p1.w;\n\n  vec3 deltaVel = acc*DT; // delta T\n  vec3 vel = v.xyz + deltaVel;\n  \n  vec3 newVel = checkAndAdjustCollision(p1, vel);\n\n  gl_FragColor = vec4(newVel, 0);\n}\n`;\n\n// ===============================\n\nconst vsPositions = /*glsl*/`\nattribute vec4 position;\n\nvoid main() {\n  gl_Position = position;\n}\n`;\n\nconst fsPositions = /*glsl*/`\nprecision mediump float;\n\nuniform sampler2D positionTexture;\nuniform sampler2D velocityTexture;\nuniform vec2 dimensions;\nuniform float DT;\n\nvoid main() {\n  vec2 texcoord = gl_FragCoord.xy / dimensions;\n  vec4 positionValue = texture2D(positionTexture, texcoord);\n  vec4 velocityValue = texture2D(velocityTexture, texcoord);\n  gl_FragColor = positionValue + velocityValue*DT; // deltaT\n}\n`;\n\n\nexport function initComputingProgram(gl, spheres) {\n\n  const textureWidth = spheres.length;\n  const textureHeight = 1;\n\n  const ext = gl.getExtension('GMAN_debug_helper');\n\n  const velocityProgram = createWebglProgram(gl, vsVelocities, fsVelocities);\n  ext.tagObject(velocityProgram, 'velocity-computation-program');\n  const positionProgram = createWebglProgram(gl, vsPositions, fsPositions);\n  ext.tagObject(positionProgram, 'position-computation-program');\n\n  gl.useProgram(positionProgram);\n  const positionProgramLocs = {\n    position: gl.getAttribLocation(positionProgram, \"position\"),\n    positionTexture: gl.getUniformLocation(positionProgram, \"positionTexture\"),\n    velocityTexture: gl.getUniformLocation(positionProgram, \"velocityTexture\"),\n    dimensions: gl.getUniformLocation(positionProgram, \"dimensions\"),\n    dt: gl.getUniformLocation(positionProgram, \"DT\"),\n  }\n\n  const velocityProgramLocs = {\n    position: gl.getAttribLocation(velocityProgram, \"position\"),\n    positionTexture: gl.getUniformLocation(velocityProgram, \"positionTexture\"),\n    velocityTexture: gl.getUniformLocation(velocityProgram, \"velocityTexture\"),\n    dimensions: gl.getUniformLocation(velocityProgram, \"dimensions\"),\n    dt: gl.getUniformLocation(velocityProgram, \"DT\"),\n  }\n\n  // setup a full canvas clip space quad\n  const spherePositions = new Float32Array(\n    spheres.map((sphere) => sphere.center).flat(),\n  );\n\n  const sphereVelocities = new Float32Array(\n    spheres.map((sphere) => sphere.velocity).flat()\n  )\n\n  const positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1]),\n    gl.STATIC_DRAW,\n  );\n\n  const inputPositionTex = createTexture(\n    gl,\n    spherePositions,\n    textureWidth,\n    textureHeight,\n  );\n  ext.tagObject(inputPositionTex, 'input-position-texture');\n  inputPositionTex.id = \"input-position-tex\";\n\n  const inputVelocityTex = createTexture(\n    gl,\n    sphereVelocities,\n    textureWidth,\n    textureHeight\n  )\n  ext.tagObject(inputVelocityTex, 'input-velocity-texture');\n  inputVelocityTex.id = \"input-velocity-tex\";\n\n\n  const outputPositionTex = createTexture(gl, null, textureWidth, textureHeight);\n  ext.tagObject(outputPositionTex, 'output-position-texture');\n  outputPositionTex.id = \"output-position-tex\";\n\n  const outputVelocityTex = createTexture(\n    gl,\n    sphereVelocities,\n    textureWidth,\n    textureHeight\n  )\n  ext.tagObject(outputVelocityTex, 'output-velocity-texture');\n  outputVelocityTex.id = \"output-velocity-tex\";\n\n  const inputPositionFb = createFramebuffer(gl, textureWidth, textureHeight, inputPositionTex);\n  ext.tagObject(inputPositionFb, 'input-position-framebuf');\n\n  const outputPositionFb = createFramebuffer(gl, textureWidth, textureHeight, outputPositionTex);\n  ext.tagObject(outputPositionFb, 'output-position-framebuf');\n  outputPositionFb.texture = outputPositionTex;\n\n  const inputVelocityFb = createFramebuffer(gl, textureWidth, textureHeight, inputVelocityTex);\n  ext.tagObject(inputVelocityFb, 'input-velocity-framebuf')\n\n  const outputVelocityFb = createFramebuffer(gl, textureWidth, textureHeight, outputVelocityTex);\n  ext.tagObject(outputVelocityFb, 'output-velocity-framebuf')\n\n\n  console.log(spherePositions)\n\n  let dataBuffers = [\n    {\n      velocity: {\n        frameBuffer: outputVelocityFb,\n        inputTexture: inputVelocityTex,\n        outputTexture: outputVelocityTex,\n      },\n      position: {\n        frameBuffer: outputPositionFb,\n        inputTexture: inputPositionTex,\n        outputTexture: outputPositionTex,\n      },\n    },\n    {\n      velocity: { frameBuffer: inputVelocityFb, inputTexture: outputVelocityTex, outputTexture: inputVelocityTex },\n      position: { frameBuffer: inputPositionFb, inputTexture: outputPositionTex, outputTexture: outputPositionTex },\n    },\n  ];\n\n  function computeVelocities(dataBuffer) {\n    gl.useProgram(velocityProgram);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, dataBuffer.position.inputTexture);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, dataBuffer.velocity.inputTexture);\n\n    gl.uniform1i(velocityProgramLocs.positionTexture, 0);\n    gl.uniform1i(velocityProgramLocs.velocityTexture, 1);\n    gl.uniform2f(velocityProgramLocs.dimensions, textureWidth, textureHeight)\n    gl.uniform1f(velocityProgramLocs.dt, Constants.dt);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, dataBuffer.velocity.frameBuffer);\n    gl.viewport(0, 0, textureWidth, textureHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.enableVertexAttribArray(positionProgramLocs.position);\n    gl.vertexAttribPointer(\n      positionProgramLocs.position,\n      2, // size (num components)\n      gl.FLOAT, // type of data in buffer\n      false, // normalize\n      0, // stride (0 = auto)\n      0, // offset\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    if (Constants.log) {\n      const results = new Float32Array(textureWidth * textureHeight * 4);\n      gl.readPixels(\n        0,\n        0,\n        textureWidth,\n        textureHeight,\n        gl.RGBA,\n        gl.FLOAT,\n        results,\n      );\n      // print the results\n      console.log('VELOCITIES');\n      console.log(results);\n    }\n  }\n\n  function computePositions(dataBuffer) {\n    gl.useProgram(positionProgram);\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, dataBuffer.position.inputTexture);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, dataBuffer.velocity.outputTexture);\n\n    gl.uniform1i(positionProgramLocs.positionTexture, 0);\n    gl.uniform1i(positionProgramLocs.velocityTexture, 1);\n    gl.uniform2f(positionProgramLocs.dimensions, textureWidth, textureHeight);\n    gl.uniform1f(positionProgramLocs.dt, Constants.dt);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, dataBuffer.position.frameBuffer);\n    gl.viewport(0, 0, textureWidth, textureHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.enableVertexAttribArray(positionProgramLocs.position);\n    gl.vertexAttribPointer(\n      positionProgramLocs.position,\n      2, // size (num components)\n      gl.FLOAT, // type of data in buffer\n      false, // normalize\n      0, // stride (0 = auto)\n      0, // offset\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    // get the result\n\n    if (Constants.log) {\n      const results = new Float32Array(textureWidth * textureHeight * 4);\n    gl.readPixels(\n      0,\n      0,\n      textureWidth,\n      textureHeight,\n      gl.RGBA,\n      gl.FLOAT,\n      results,\n    );\n    // print the results\n    console.log(\"POSITIONS\")\n    console.log(results);\n  }\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  }\n\n  return {\n    dataBuffers,\n    computeVelocities,\n    computePositions,\n  };\n}\n\nfunction createTexture(gl, data, width, height) {\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.pixelStorei(gl.PACK_ALIGNMENT, 1);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0, // mip level\n    gl.RGBA, // internal format\n    width,\n    height,\n    0, // border\n    gl.RGBA, // format\n    gl.FLOAT, // type\n    data,\n  );\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return tex;\n}\n\nfunction createFramebuffer(gl, width, height, tex) {\n  const fb = gl.createFramebuffer();\n  gl.viewport(0, 0, width, height);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fb)\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    tex,\n    0,\n  );\n  return fb;\n}\n", "import { Sphere } from \"./sphere\";\nimport { createWebglProgram } from \"./utils\";\n\n// const m4 = require('./m4')\n// import * as m4 from './m4'\n\nexport function initGraphicsProgram(\n  gl,\n  spheres,\n) {\n  const vs = /*glsl*/`\n  const mediump float;\n  attribute float index;\n  varying vec3 normal;\n  uniform sampler2D positionTexture;\n  uniform vec2 dimensions;\n  uniform mat4 matrix;\n\n  vec2 indexToTextureIndex(vec2 dimensions, float index) {\n    float y = floor(index / dimensions.x);\n    float x = mod(index, dimensions.x);\n    return (vec2(x, y) + 0.5) / dimensions;\n  }\n\n  void main() {\n    vec4 position = texture2D(positionTexture, indexToTextureIndex(dimensions, index));\n    gl_Position = matrix*vec4(position.xyz, 1.0);\n    \n    vec3 cameraPosition = vec3(500.0, 500.0, 1000.0);\n    vec4 viewSpace = vec4(position.xyz - cameraPosition, 1.0);\n    float distanceFromCamera = length(viewSpace.xyz);\n\n\n    float baseSize = position.w;\n    float perspectiveScale = 1000.0 / distanceFromCamera;\n    gl_PointSize = baseSize * perspectiveScale;\n  }\n  `;\n\n  const fs = /*glsl*/`\n  precision mediump float;\n  void main() {\n      vec2 centerToPixel = 2.0 * gl_PointCoord - 1.0;\n      if (dot(centerToPixel, centerToPixel) > 1.0) {\n          discard;\n      }\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); \n  }\n  `;\n\n  const program = createWebglProgram(gl, vs, fs);\n  gl.useProgram(program);\n\n  const indexLoc = gl.getAttribLocation(program, \"index\");\n  const textureLoc = gl.getUniformLocation(program, \"positionTexture\");\n  const dimensionsLoc = gl.getUniformLocation(program, \"dimensions\");\n  const matrixLoc = gl.getUniformLocation(program, \"matrix\");\n  gl.uniform1i(textureLoc, 0);\n  gl.uniform2f(dimensionsLoc, spheres.length, 1);\n\n  if (gl.canvas instanceof OffscreenCanvas) {\n    throw new Error(\"Nope...\")\n  }\n\n  var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n  var projectionMatrix =\n    m4.perspective(60 * Math.PI / 180, aspect, 1, 2000);\n  var cameraPosition = [500, 500, 2000];\n  var target = [500, 500, 500];\n  var up = [0, 1, 0];\n  var cameraMatrix = m4.lookAt(cameraPosition, target, up, m4.identity());\n\n  // Make a view matrix from the camera matrix.\n  var viewMatrix = m4.inverse(cameraMatrix);\n\n  var viewProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\n\n  gl.uniformMatrix4fv(\n    matrixLoc, false,\n    viewProjectionMatrix\n  )\n  const pBuffer = gl.createBuffer();\n\n  let ids = new Array(spheres.length).fill(0).map((_, i) => i);\n\n  return {\n    render: (dataBuffer) => {\n      gl.useProgram(program);\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      // gl.enable(gl.CULL_FACE);\n      gl.enable(gl.DEPTH_TEST);\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, pBuffer);\n      gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array(ids),\n        gl.STATIC_DRAW,\n      );\n      gl.enableVertexAttribArray(indexLoc);\n      gl.vertexAttribPointer(indexLoc, 1, gl.FLOAT, false, 0, 0);\n\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, dataBuffer.position.outputTexture);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\n      gl.clearColor(0, 0, 0, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      gl.drawArrays(gl.POINTS, 0, ids.length);\n    },\n  };\n}\n", "import { initComputingProgram } from \"./computing\";\nimport { initGraphicsProgram as initRenderingProgram } from \"./graphics\";\nimport { Sphere } from \"./sphere\";\nimport { initCanvas } from \"./utils\";\n\nfunction main() {\n  const canvas = initCanvas();\n\n  const gl = canvas.getContext(\"webgl\");\n  if (!gl) throw new Error(\"WebGL not enabled!\");\n\n  const spheres = [];\n  for (let i = 0; i < 10; i++) {\n    spheres.push(Sphere.random(10));\n  }\n  // spheres.push(new Sphere({ center: {x: 500, y: 500, z: 500}, velocity: {x: 3, y: 2, z: 4}, mass: 20 }))\n\n  const counter = new Counter()\n  const compute = initComputingProgram(gl, spheres);\n  const render = initRenderingProgram(gl, spheres);\n\n  function renderStep() {\n    compute.computeVelocities(compute.dataBuffers[counter.count])\n    compute.computePositions(compute.dataBuffers[counter.count]);\n    render.render(compute.dataBuffers[counter.count])\n    counter.inc();\n    requestAnimationFrame(renderStep);\n  }\n  requestAnimationFrame(renderStep);\n\n}\n\nfunction Counter() {\n  this.count = 0;\n  this.inc = () => (this.count = (this.count + 1) % 2);\n}\n\nwindow.addEventListener(\"load\", () => main());\n"],
  "mappings": "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",
  "names": []
}
